{
    "Conditions": {
        "AssetsCloudFrontCertArnCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "AssetsCloudFrontCertArn"
                        },
                        ""
                    ]
                }
            ]
        },
        "AssetsCloudFrontDomainAndUsEast1Condition": {
            "Fn::And": [
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AssetsCloudFrontDomain"
                                },
                                ""
                            ]
                        }
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "AWS::Region"
                        },
                        "us-east-1"
                    ]
                }
            ]
        },
        "AssetsCloudFrontDomainCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "AssetsCloudFrontDomain"
                        },
                        ""
                    ]
                }
            ]
        },
        "AssetsUseCloudFrontCondition": {
            "Fn::Equals": [
                {
                    "Ref": "AssetsUseCloudFront"
                },
                "true"
            ]
        },
        "CacheCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "CacheNodeType"
                        },
                        "(none)"
                    ]
                }
            ]
        },
        "DatabaseCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "DatabaseClass"
                        },
                        "(none)"
                    ]
                }
            ]
        },
        "Elasticsearch": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ElasticsearchInstanceType"
                        },
                        "(none)"
                    ]
                }
            ]
        },
        "InGovCloudRegion": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
        },
        "NoAlternateDomains": {
            "Fn::Equals": [
                {
                    "Fn::Join": [
                        "",
                        {
                            "Ref": "DomainNameAlternates"
                        }
                    ]
                },
                ""
            ]
        },
        "TcpHealthCheck": {
            "Fn::Equals": [
                {
                    "Ref": "WebWorkerHealthCheck"
                },
                ""
            ]
        },
        "UsingRedis": {
            "Fn::Equals": [
                {
                    "Ref": "CacheEngine"
                },
                "redis"
            ]
        }
    },
    "Mappings": {
        "RdsEngineMap": {
            "aurora": {
                "Port": "3306"
            },
            "mariadb": {
                "Port": "3306"
            },
            "mysql": {
                "Port": "3306"
            },
            "oracle-ee": {
                "Port": "1521"
            },
            "oracle-se": {
                "Port": "1521"
            },
            "oracle-se1": {
                "Port": "1521"
            },
            "oracle-se2": {
                "Port": "1521"
            },
            "postgres": {
                "Port": "5432"
            },
            "sqlserver-ee": {
                "Port": "1433"
            },
            "sqlserver-ex": {
                "Port": "1433"
            },
            "sqlserver-se": {
                "Port": "1433"
            },
            "sqlserver-web": {
                "Port": "1433"
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Global"
                    },
                    "Parameters": [
                        "DomainName",
                        "DomainNameAlternates",
                        "PrimaryAZ",
                        "SecondaryAZ"
                    ]
                },
                {
                    "Label": {
                        "default": "Application Server"
                    },
                    "Parameters": [
                        "ContainerInstanceType",
                        "SecretKey",
                        "AMI",
                        "KeyName",
                        "DesiredScale",
                        "MaxScale",
                        "InstanceVolumeSize",
                        "DataEbsVolumeSize"
                    ]
                },
                {
                    "Label": {
                        "default": "Load Balancer"
                    },
                    "Parameters": [
                        "WebWorkerHealthCheck",
                        "WebWorkerPort",
                        "WebWorkerProtocol"
                    ]
                },
                {
                    "Label": {
                        "default": "Static Media"
                    },
                    "Parameters": [
                        "AssetsUseCloudFront",
                        "AssetsCloudFrontDomain",
                        "AssetsCloudFrontCertArn"
                    ]
                },
                {
                    "Label": {
                        "default": "Database"
                    },
                    "Parameters": [
                        "DatabaseClass",
                        "DatabaseEngine",
                        "DatabaseEngineVersion",
                        "DatabaseName",
                        "DatabaseUser",
                        "DatabasePassword",
                        "DatabaseAllocatedStorage",
                        "DatabaseStorageEncrypted",
                        "DatabaseMultiAZ",
                        "DatabaseBackupRetentionDays"
                    ]
                },
                {
                    "Label": {
                        "default": "Cache"
                    },
                    "Parameters": [
                        "CacheNodeType",
                        "CacheEngine"
                    ]
                },
                {
                    "Label": {
                        "default": "Elasticsearch"
                    },
                    "Parameters": [
                        "ElasticsearchInstanceType",
                        "ElasticsearchVersion",
                        "ElasticsearchVolumeSize"
                    ]
                }
            ],
            "ParameterLabels": {
                "AMI": {
                    "default": "Amazon Machine Image (AMI)"
                },
                "AssetsCloudFrontCertArn": {
                    "default": "CloudFront SSL Certificate ARN"
                },
                "AssetsCloudFrontDomain": {
                    "default": "CloudFront Custom Domain"
                },
                "AssetsUseCloudFront": {
                    "default": "Enable CloudFront"
                },
                "CacheEngine": {
                    "default": "Engine"
                },
                "CacheNodeType": {
                    "default": "Instance Type"
                },
                "ContainerInstanceType": {
                    "default": "Instance Type"
                },
                "DataEbsVolumeSize": {
                    "default": "Data EBS Volume Size"
                },
                "DatabaseAllocatedStorage": {
                    "default": "Storage (GB)"
                },
                "DatabaseBackupRetentionDays": {
                    "default": "Backup Retention Days"
                },
                "DatabaseClass": {
                    "default": "Instance Type"
                },
                "DatabaseEngine": {
                    "default": "Engine"
                },
                "DatabaseEngineVersion": {
                    "default": "Engine Version"
                },
                "DatabaseMultiAZ": {
                    "default": "Enable MultiAZ"
                },
                "DatabaseName": {
                    "default": "Database Name"
                },
                "DatabasePassword": {
                    "default": "Password"
                },
                "DatabaseStorageEncrypted": {
                    "default": "Enable Encrypted Storage"
                },
                "DatabaseUser": {
                    "default": "Username"
                },
                "DesiredScale": {
                    "default": "Desired Instance Count"
                },
                "DomainName": {
                    "default": "Domain Name"
                },
                "DomainNameAlternates": {
                    "default": "Alternate Domain Names"
                },
                "ElasticsearchInstanceType": {
                    "default": "Instance Type"
                },
                "ElasticsearchVersion": {
                    "default": "Version"
                },
                "ElasticsearchVolumeSize": {
                    "default": "Storage (GB)"
                },
                "InstanceVolumeSize": {
                    "default": "Instance Volume Size"
                },
                "KeyName": {
                    "default": "SSH Key Name"
                },
                "MaxScale": {
                    "default": "Maximum Instance Count"
                },
                "PrimaryAZ": {
                    "default": "Primary Availability Zone"
                },
                "SecondaryAZ": {
                    "default": "Secondary Availability Zone"
                },
                "SecretKey": {
                    "default": "Secret Key"
                },
                "WebWorkerHealthCheck": {
                    "default": "Health Check URL"
                },
                "WebWorkerPort": {
                    "default": "Web Worker Port"
                },
                "WebWorkerProtocol": {
                    "default": "Web Worker Protocol"
                }
            }
        }
    },
    "Outputs": {
        "AssetsBucketDomainName": {
            "Description": "Assets bucket domain name",
            "Value": {
                "Fn::GetAtt": [
                    "AssetsBucket",
                    "DomainName"
                ]
            }
        },
        "AssetsDistributionDomainName": {
            "Condition": "AssetsUseCloudFrontCondition",
            "Description": "The assest CDN domain name",
            "Value": {
                "Fn::GetAtt": [
                    "AssetsDistribution",
                    "DomainName"
                ]
            }
        },
        "ElasticsearchDomainArn": {
            "Condition": "Elasticsearch",
            "Description": "Elasticsearch domain ARN",
            "Value": {
                "Fn::GetAtt": [
                    "ElasticsearchDomain",
                    "DomainArn"
                ]
            }
        },
        "ElasticsearchDomainEndpoint": {
            "Condition": "Elasticsearch",
            "Description": "Elasticsearch domain endpoint",
            "Value": {
                "Fn::GetAtt": [
                    "ElasticsearchDomain",
                    "DomainEndpoint"
                ]
            }
        },
        "LoadBalancerDNSName": {
            "Description": "Loadbalancer DNS",
            "Value": {
                "Fn::GetAtt": [
                    "LoadBalancer",
                    "DNSName"
                ]
            }
        },
        "PrivateAssetsBucketDomainName": {
            "Description": "Private assets bucket domain name",
            "Value": {
                "Fn::GetAtt": [
                    "PrivateAssetsBucket",
                    "DomainName"
                ]
            }
        }
    },
    "Parameters": {
        "AMI": {
            "Default": "",
            "Description": "The Amazon Machine Image (AMI) to use for instances. Make sure to use the correct AMI for your region and instance type (t2 instances require HVM AMIs).",
            "Type": "String"
        },
        "AssetsCloudFrontCertArn": {
            "Description": "If (1) you specified a custom static media domain, (2) your stack is NOT in the us-east-1 region, and (3) you wish to serve static media over HTTPS, you must manually create an ACM certificate in the us-east-1 region and provide its ARN here.",
            "Type": "String"
        },
        "AssetsCloudFrontDomain": {
            "Default": "",
            "Description": "A custom domain name (CNAME) for your CloudFront distribution, e.g., \"static.example.com\".",
            "Type": "String"
        },
        "AssetsUseCloudFront": {
            "AllowedValues": [
                "true",
                "false"
            ],
            "Default": "true",
            "Description": "Whether or not to create a CloudFront distribution tied to the S3 assets bucket.",
            "Type": "String"
        },
        "CacheEngine": {
            "AllowedValues": [
                "redis",
                "memcached"
            ],
            "ConstraintDescription": "must select a valid cache engine.",
            "Default": "redis",
            "Description": "Cache engine (redis or memcached)",
            "Type": "String"
        },
        "CacheNodeType": {
            "AllowedValues": [
                "(none)",
                "cache.t2.micro",
                "cache.t2.small",
                "cache.t2.medium",
                "cache.m3.medium",
                "cache.m3.large",
                "cache.m3.xlarge",
                "cache.m3.2xlarge",
                "cache.m4.large",
                "cache.m4.xlarge",
                "cache.m4.2xlarge",
                "cache.m4.4xlarge",
                "cache.m4.10xlarge",
                "cache.r3.large",
                "cache.r3.xlarge",
                "cache.r3.2xlarge",
                "cache.r3.4xlarge",
                "cache.r3.8xlarge"
            ],
            "ConstraintDescription": "must select a valid cache node type.",
            "Default": "cache.t2.micro",
            "Description": "Cache instance type",
            "Type": "String"
        },
        "ContainerInstanceType": {
            "AllowedValues": [
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "t2.2xlarge",
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.12xlarge",
                "m5.24xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m4.16xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "p2.xlarge",
                "p2.8xlarge",
                "p2.16xlarge",
                "g2.2xlarge",
                "g2.8xlarge",
                "x1.16large",
                "x1.32xlarge",
                "r4.large",
                "r4.xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge",
                "r4.16xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i3.large",
                "i3.xlarge",
                "i3.2xlarge",
                "i3.4xlarge",
                "i3.8xlarge",
                "i3.16large",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "f1.2xlarge",
                "f1.16xlarge"
            ],
            "Default": "t2.micro",
            "Description": "The application server instance type",
            "Type": "String"
        },
        "DataEbsVolumeSize": {
            "Default": "20",
            "Description": "The size of the attached data EBS volume (Gb)",
            "Type": "Number"
        },
        "DatabaseAllocatedStorage": {
            "ConstraintDescription": "must be between 5 and 1024Gb.",
            "Default": "20",
            "Description": "The size of the database (Gb)",
            "MaxValue": "1024",
            "MinValue": "5",
            "Type": "Number"
        },
        "DatabaseBackupRetentionDays": {
            "AllowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17",
                "18",
                "19",
                "20",
                "21",
                "22",
                "23",
                "24",
                "25",
                "26",
                "27",
                "28",
                "29",
                "30",
                "31",
                "32",
                "33",
                "34",
                "35"
            ],
            "Default": "30",
            "Description": "The number of days for which automated backups are retained. Setting to 0 disables automated backups.",
            "Type": "Number"
        },
        "DatabaseClass": {
            "AllowedValues": [
                "(none)",
                "db.t1.micro",
                "db.m1.small",
                "db.m4.large",
                "db.m4.xlarge",
                "db.m4.2xlarge",
                "db.m4.4xlarge",
                "db.m4.10xlarge",
                "db.r4.large",
                "db.r4.xlarge",
                "db.r4.2xlarge",
                "db.r4.4xlarge",
                "db.r4.8xlarge",
                "db.r4.16xlarge",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge",
                "db.t2.micro",
                "db.t2.small",
                "db.t2.medium",
                "db.t2.large",
                "db.m3.medium",
                "db.m3.large",
                "db.m3.xlarge",
                "db.m3.2xlarge",
                "db.m1.small",
                "db.m1.medium",
                "db.m1.large",
                "db.m1.xlarge",
                "db.m2.xlarge",
                "db.m2.2xlarge",
                "db.m2.4xlarge"
            ],
            "ConstraintDescription": "must select a valid database instance type.",
            "Default": "db.t2.micro",
            "Description": "Database instance class",
            "Type": "String"
        },
        "DatabaseEngine": {
            "AllowedValues": [
                "aurora",
                "mariadb",
                "mysql",
                "oracle-ee",
                "oracle-se2",
                "oracle-se1",
                "oracle-se",
                "postgres",
                "sqlserver-ee",
                "sqlserver-se",
                "sqlserver-ex",
                "sqlserver-web"
            ],
            "ConstraintDescription": "must select a valid database engine.",
            "Default": "postgres",
            "Description": "Database engine to use",
            "Type": "String"
        },
        "DatabaseEngineVersion": {
            "Default": "",
            "Description": "Database engine version to use",
            "Type": "String"
        },
        "DatabaseMultiAZ": {
            "AllowedValues": [
                "true",
                "false"
            ],
            "ConstraintDescription": "must choose true or false.",
            "Default": "false",
            "Description": "Whether or not to create a MultiAZ database",
            "Type": "String"
        },
        "DatabaseName": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9_]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
            "Default": "app",
            "Description": "Name of the database to create in the database server",
            "MaxLength": "64",
            "MinLength": "1",
            "Type": "String"
        },
        "DatabasePassword": {
            "AllowedPattern": "[ !#-.0-?A-~]*",
            "ConstraintDescription": "must consist of 10-41 printable ASCII characters except \"/\", \"\"\", or \"@\".",
            "Description": "The database admin account password",
            "MaxLength": "41",
            "MinLength": "10",
            "NoEcho": true,
            "Type": "String"
        },
        "DatabaseStorageEncrypted": {
            "AllowedValues": [
                "true",
                "false"
            ],
            "Default": "false",
            "Description": "Whether or not to encrypt the underlying database storage",
            "Type": "String"
        },
        "DatabaseUser": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
            "Default": "app",
            "Description": "The database admin account username",
            "MaxLength": "16",
            "MinLength": "1",
            "Type": "String"
        },
        "DesiredScale": {
            "Default": "2",
            "Description": "Desired container instances count",
            "Type": "Number"
        },
        "DomainName": {
            "Description": "The fully-qualified domain name for the application.",
            "Type": "String"
        },
        "DomainNameAlternates": {
            "Description": "A comma-separated list of Alternate FQDNs to be included in the Subject Alternative Name extension of the SSL certificate.",
            "Type": "CommaDelimitedList"
        },
        "ElasticsearchInstanceType": {
            "AllowedValues": [
                "(none)",
                "t2.micro.elasticsearch",
                "t2.small.elasticsearch",
                "t2.medium.elasticsearch",
                "m3.medium.elasticsearch",
                "m3.large.elasticsearch",
                "m3.xlarge.elasticsearch",
                "m3.2xlarge.elasticsearch",
                "m4.large.elasticsearch",
                "m4.xlarge.elasticsearch",
                "m4.2xlarge.elasticsearch",
                "m4.4xlarge.elasticsearch",
                "m4.10xlarge.elasticsearch",
                "c4.large.elasticsearch",
                "c4.xlarge.elasticsearch",
                "c4.2xlarge.elasticsearch",
                "c4.4xlarge.elasticsearch",
                "c4.8xlarge.elasticsearch",
                "r3.large.elasticsearch",
                "r3.xlarge.elasticsearch",
                "r3.2xlarge.elasticsearch",
                "r3.4xlarge.elasticsearch",
                "r3.8xlarge.elasticsearch",
                "r4.large.elasticsearch",
                "r4.xlarge.elasticsearch",
                "r4.2xlarge.elasticsearch",
                "r4.4xlarge.elasticsearch",
                "r4.8xlarge.elasticsearch",
                "r4.16xlarge.elasticsearch",
                "i2.xlarge.elasticsearch",
                "i2.2xlarge.elasticsearch"
            ],
            "ConstraintDescription": "must select a valid Elasticsearch instance type.",
            "Default": "(none)",
            "Description": "Elasticsearch instance type. Note: not all types are supported in all regions; see: http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/aes-supported-instance-types.html",
            "Type": "String"
        },
        "ElasticsearchVersion": {
            "AllowedValues": [
                "1.5",
                "2.3",
                "5.1",
                "5.3"
            ],
            "ConstraintDescription": "must select a valid Elasticsearch version.",
            "Default": "2.3",
            "Description": "Elasticsearch version. Note: t2.micro.elasticsearch instances support only versions 2.3 and 1.5.",
            "Type": "String"
        },
        "ElasticsearchVolumeSize": {
            "Default": "10",
            "Description": "Elasticsearch EBS volume size, in GB. Note: maximum volume size varies by instance type; see: http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/aes-limits.html#ebsresource.",
            "MaxValue": "1536",
            "MinValue": "10",
            "Type": "Number"
        },
        "InstanceVolumeSize": {
            "Default": "20",
            "Description": "The size of the root EBS volume (Gb)",
            "Type": "Number"
        },
        "KeyName": {
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the AWS EC2 instances",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "MaxScale": {
            "Default": "4",
            "Description": "Maximum container instances count",
            "Type": "Number"
        },
        "PrimaryAZ": {
            "Description": "The primary availability zone for creating resources.",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "SecondaryAZ": {
            "Description": "The secondary availability zone for creating resources. Must differ from primary zone.",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "SecretKey": {
            "Description": "Application secret key for this stack (optional)",
            "NoEcho": true,
            "Type": "String"
        },
        "WebWorkerHealthCheck": {
            "Default": "",
            "Description": "Web worker health check URL path, e.g., \"/health-check\"; will default to TCP-only health check if left blank",
            "Type": "String"
        },
        "WebWorkerPort": {
            "Default": "80",
            "Description": "Default web worker exposed port (non-HTTPS)",
            "Type": "Number"
        },
        "WebWorkerProtocol": {
            "AllowedValues": [
                "HTTP",
                "HTTPS"
            ],
            "Default": "HTTP",
            "Description": "Web worker instance protocol",
            "Type": "String"
        }
    },
    "Resources": {
        "AssetsBucket": {
            "DeletionPolicy": "Retain",
            "Properties": {
                "AccessControl": "PublicRead",
                "CorsConfiguration": {
                    "CorsRules": [
                        {
                            "AllowedHeaders": [
                                "*"
                            ],
                            "AllowedMethods": [
                                "POST",
                                "PUT",
                                "HEAD",
                                "GET"
                            ],
                            "AllowedOrigins": {
                                "Fn::Split": [
                                    ";",
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "https://",
                                                {
                                                    "Ref": "DomainName"
                                                },
                                                {
                                                    "Fn::If": [
                                                        "NoAlternateDomains",
                                                        "",
                                                        ";https://"
                                                    ]
                                                },
                                                {
                                                    "Fn::Join": [
                                                        ";https://",
                                                        {
                                                            "Ref": "DomainNameAlternates"
                                                        }
                                                    ]
                                                }
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                },
                "VersioningConfiguration": {
                    "Status": "Enabled"
                }
            },
            "Type": "AWS::S3::Bucket"
        },
        "AssetsCertificate": {
            "Condition": "AssetsCloudFrontDomainAndUsEast1Condition",
            "Properties": {
                "DomainName": {
                    "Ref": "AssetsCloudFrontDomain"
                },
                "DomainValidationOptions": [
                    {
                        "DomainName": {
                            "Ref": "AssetsCloudFrontDomain"
                        },
                        "ValidationDomain": {
                            "Ref": "AssetsCloudFrontDomain"
                        }
                    }
                ]
            },
            "Type": "AWS::CertificateManager::Certificate"
        },
        "AssetsDistribution": {
            "Condition": "AssetsUseCloudFrontCondition",
            "Properties": {
                "DistributionConfig": {
                    "Aliases": {
                        "Fn::If": [
                            "AssetsCloudFrontDomainCondition",
                            [
                                {
                                    "Ref": "AssetsCloudFrontDomain"
                                }
                            ],
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    "DefaultCacheBehavior": {
                        "ForwardedValues": {
                            "Headers": [
                                "Origin",
                                "Access-Control-Request-Headers",
                                "Access-Control-Request-Method"
                            ],
                            "QueryString": "true"
                        },
                        "TargetOriginId": "Assets",
                        "ViewerProtocolPolicy": "allow-all"
                    },
                    "Enabled": "true",
                    "Origins": [
                        {
                            "DomainName": {
                                "Fn::GetAtt": [
                                    "AssetsBucket",
                                    "DomainName"
                                ]
                            },
                            "Id": "Assets",
                            "S3OriginConfig": {
                                "OriginAccessIdentity": ""
                            }
                        }
                    ],
                    "ViewerCertificate": {
                        "Fn::If": [
                            "AssetsCloudFrontDomainAndUsEast1Condition",
                            {
                                "AcmCertificateArn": {
                                    "Ref": "AssetsCertificate"
                                },
                                "SslSupportMethod": "sni-only"
                            },
                            {
                                "Fn::If": [
                                    "AssetsCloudFrontCertArnCondition",
                                    {
                                        "AcmCertificateArn": {
                                            "Ref": "AssetsCloudFrontCertArn"
                                        },
                                        "SslSupportMethod": "sni-only"
                                    },
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            }
                        ]
                    }
                }
            },
            "Type": "AWS::CloudFront::Distribution"
        },
        "AutoScalingGroup": {
            "Properties": {
                "DesiredCapacity": {
                    "Ref": "DesiredScale"
                },
                "HealthCheckGracePeriod": 300,
                "HealthCheckType": "EC2",
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfiguration"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "LoadBalancer"
                    }
                ],
                "MaxSize": {
                    "Ref": "MaxScale"
                },
                "MinSize": {
                    "Ref": "DesiredScale"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "PropagateAtLaunch": true,
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "web_worker"
                                ]
                            ]
                        }
                    }
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "ContainerASubnet"
                    },
                    {
                        "Ref": "ContainerBSubnet"
                    }
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "CacheCluser": {
            "Condition": "CacheCondition",
            "Properties": {
                "CacheNodeType": {
                    "Ref": "CacheNodeType"
                },
                "CacheSubnetGroupName": {
                    "Ref": "CacheSubnetGroup"
                },
                "Engine": {
                    "Ref": "CacheEngine"
                },
                "NumCacheNodes": 1,
                "Port": {
                    "Fn::If": [
                        "UsingRedis",
                        6379,
                        11211
                    ]
                },
                "VpcSecurityGroupIds": [
                    {
                        "Ref": "CacheSecurityGroup"
                    }
                ]
            },
            "Type": "AWS::ElastiCache::CacheCluster"
        },
        "CacheSecurityGroup": {
            "Condition": "CacheCondition",
            "Properties": {
                "GroupDescription": "Cache security group.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "10.0.10.0/24",
                        "FromPort": {
                            "Fn::If": [
                                "UsingRedis",
                                "6379",
                                "11211"
                            ]
                        },
                        "IpProtocol": "tcp",
                        "ToPort": {
                            "Fn::If": [
                                "UsingRedis",
                                "6379",
                                "11211"
                            ]
                        }
                    },
                    {
                        "CidrIp": "10.0.11.0/24",
                        "FromPort": {
                            "Fn::If": [
                                "UsingRedis",
                                "6379",
                                "11211"
                            ]
                        },
                        "IpProtocol": "tcp",
                        "ToPort": {
                            "Fn::If": [
                                "UsingRedis",
                                "6379",
                                "11211"
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "CacheSubnetGroup": {
            "Condition": "CacheCondition",
            "Properties": {
                "Description": "Subnets available for the cache instance",
                "SubnetIds": [
                    {
                        "Ref": "ContainerASubnet"
                    },
                    {
                        "Ref": "ContainerBSubnet"
                    }
                ]
            },
            "Type": "AWS::ElastiCache::SubnetGroup"
        },
        "Certificate": {
            "Properties": {
                "DomainName": {
                    "Ref": "DomainName"
                },
                "DomainValidationOptions": [
                    {
                        "DomainName": {
                            "Ref": "DomainName"
                        },
                        "ValidationDomain": {
                            "Ref": "DomainName"
                        }
                    }
                ],
                "SubjectAlternativeNames": {
                    "Fn::If": [
                        "NoAlternateDomains",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        {
                            "Ref": "DomainNameAlternates"
                        }
                    ]
                }
            },
            "Type": "AWS::CertificateManager::Certificate"
        },
        "ContainerARouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "ContainerASubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "ContainerASubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "PrimaryAZ"
                },
                "CidrBlock": "10.0.10.0/24",
                "MapPublicIpOnLaunch": "true",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "ContainerBRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "ContainerBSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "ContainerBSubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "SecondaryAZ"
                },
                "CidrBlock": "10.0.11.0/24",
                "MapPublicIpOnLaunch": "true",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "ContainerInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "ContainerInstanceRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "ContainerInstanceRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:ListBucket"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                {
                                                    "Fn::If": [
                                                        "InGovCloudRegion",
                                                        "arn:aws-us-gov",
                                                        "arn:aws"
                                                    ]
                                                },
                                                ":s3:::",
                                                {
                                                    "Ref": "AssetsBucket"
                                                }
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                {
                                                    "Fn::If": [
                                                        "InGovCloudRegion",
                                                        "arn:aws-us-gov",
                                                        "arn:aws"
                                                    ]
                                                },
                                                ":s3:::",
                                                {
                                                    "Ref": "AssetsBucket"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Action": [
                                        "s3:ListBucket"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                {
                                                    "Fn::If": [
                                                        "InGovCloudRegion",
                                                        "arn:aws-us-gov",
                                                        "arn:aws"
                                                    ]
                                                },
                                                ":s3:::",
                                                {
                                                    "Ref": "PrivateAssetsBucket"
                                                }
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                {
                                                    "Fn::If": [
                                                        "InGovCloudRegion",
                                                        "arn:aws-us-gov",
                                                        "arn:aws"
                                                    ]
                                                },
                                                ":s3:::",
                                                {
                                                    "Ref": "PrivateAssetsBucket"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        },
                        "PolicyName": "AssetsManagementPolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:Create*",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                {
                                                    "Fn::If": [
                                                        "InGovCloudRegion",
                                                        "arn:aws-us-gov",
                                                        "arn:aws"
                                                    ]
                                                },
                                                ":logs:*:*:*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        },
                        "PolicyName": "LoggingPolicy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "ContainerLogs": {
            "DeletionPolicy": "Retain",
            "Properties": {
                "RetentionInDays": 365
            },
            "Type": "AWS::Logs::LogGroup"
        },
        "ContainerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Container security group.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "10.0.2.0/24",
                        "FromPort": {
                            "Ref": "WebWorkerPort"
                        },
                        "IpProtocol": "tcp",
                        "ToPort": {
                            "Ref": "WebWorkerPort"
                        }
                    },
                    {
                        "CidrIp": "10.0.3.0/24",
                        "FromPort": {
                            "Ref": "WebWorkerPort"
                        },
                        "IpProtocol": "tcp",
                        "ToPort": {
                            "Ref": "WebWorkerPort"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "DataEbsVolume": {
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "PrimaryAZ"
                },
                "Size": {
                    "Ref": "DataEbsVolumeSize"
                },
                "VolumeType": "st1"
            },
            "Type": "AWS::EC2::Volume"
        },
        "DatabaseSecurityGroup": {
            "Condition": "DatabaseCondition",
            "Properties": {
                "GroupDescription": "Database security group.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "10.0.10.0/24",
                        "FromPort": {
                            "Fn::FindInMap": [
                                "RdsEngineMap",
                                {
                                    "Ref": "DatabaseEngine"
                                },
                                "Port"
                            ]
                        },
                        "IpProtocol": "tcp",
                        "ToPort": {
                            "Fn::FindInMap": [
                                "RdsEngineMap",
                                {
                                    "Ref": "DatabaseEngine"
                                },
                                "Port"
                            ]
                        }
                    },
                    {
                        "CidrIp": "10.0.11.0/24",
                        "FromPort": {
                            "Fn::FindInMap": [
                                "RdsEngineMap",
                                {
                                    "Ref": "DatabaseEngine"
                                },
                                "Port"
                            ]
                        },
                        "IpProtocol": "tcp",
                        "ToPort": {
                            "Fn::FindInMap": [
                                "RdsEngineMap",
                                {
                                    "Ref": "DatabaseEngine"
                                },
                                "Port"
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "DatabaseSubnetGroup": {
            "Condition": "DatabaseCondition",
            "Properties": {
                "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
                "SubnetIds": [
                    {
                        "Ref": "ContainerASubnet"
                    },
                    {
                        "Ref": "ContainerBSubnet"
                    }
                ]
            },
            "Type": "AWS::RDS::DBSubnetGroup"
        },
        "ElasticsearchDomain": {
            "Condition": "Elasticsearch",
            "Properties": {
                "AccessPolicies": {
                    "Statement": [
                        {
                            "Action": [
                                "es:*"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::GetAtt": [
                                            "ContainerInstanceRole",
                                            "Arn"
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                },
                "EBSOptions": {
                    "EBSEnabled": "true",
                    "VolumeSize": {
                        "Ref": "ElasticsearchVolumeSize"
                    }
                },
                "ElasticsearchClusterConfig": {
                    "InstanceType": {
                        "Ref": "ElasticsearchInstanceType"
                    }
                },
                "ElasticsearchVersion": {
                    "Ref": "ElasticsearchVersion"
                }
            },
            "Type": "AWS::Elasticsearch::Domain"
        },
        "GatewayAttachement": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "LaunchConfiguration": {
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "InstanceVolumeSize"
                            }
                        }
                    }
                ],
                "EbsOptimized": "true",
                "IamInstanceProfile": {
                    "Ref": "ContainerInstanceProfile"
                },
                "ImageId": {
                    "Ref": "AMI"
                },
                "InstanceType": {
                    "Ref": "ContainerInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "ContainerSecurityGroup"
                    }
                ]
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "LoadBalancer": {
            "Properties": {
                "CrossZone": "true",
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Interval": "100",
                    "Target": {
                        "Fn::If": [
                            "TcpHealthCheck",
                            {
                                "Fn::Join": [
                                    "",
                                    [
                                        "TCP:",
                                        {
                                            "Ref": "WebWorkerPort"
                                        }
                                    ]
                                ]
                            },
                            {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Ref": "WebWorkerProtocol"
                                        },
                                        ":",
                                        {
                                            "Ref": "WebWorkerPort"
                                        },
                                        {
                                            "Ref": "WebWorkerHealthCheck"
                                        }
                                    ]
                                ]
                            }
                        ]
                    },
                    "Timeout": "10",
                    "UnhealthyThreshold": "2"
                },
                "Listeners": [
                    {
                        "InstancePort": {
                            "Ref": "WebWorkerPort"
                        },
                        "InstanceProtocol": {
                            "Ref": "WebWorkerProtocol"
                        },
                        "LoadBalancerPort": 80,
                        "Protocol": "HTTP"
                    },
                    {
                        "InstancePort": {
                            "Ref": "WebWorkerPort"
                        },
                        "InstanceProtocol": {
                            "Ref": "WebWorkerProtocol"
                        },
                        "LoadBalancerPort": 443,
                        "Protocol": "HTTPS",
                        "SSLCertificateId": {
                            "Ref": "Certificate"
                        }
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "LoadbalancerASubnet"
                    },
                    {
                        "Ref": "LoadbalancerBSubnet"
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "LoadBalancerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Web load balancer security group.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "LoadbalancerASubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "PrimaryAZ"
                },
                "CidrBlock": "10.0.2.0/24",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "LoadbalancerASubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "LoadbalancerASubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "LoadbalancerBSubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "SecondaryAZ"
                },
                "CidrBlock": "10.0.3.0/24",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "LoadbalancerBSubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "LoadbalancerBSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "PostgreSQL": {
            "Condition": "DatabaseCondition",
            "DeletionPolicy": "Snapshot",
            "Properties": {
                "AllocatedStorage": {
                    "Ref": "DatabaseAllocatedStorage"
                },
                "BackupRetentionPeriod": {
                    "Ref": "DatabaseBackupRetentionDays"
                },
                "DBInstanceClass": {
                    "Ref": "DatabaseClass"
                },
                "DBName": {
                    "Ref": "DatabaseName"
                },
                "DBSubnetGroupName": {
                    "Ref": "DatabaseSubnetGroup"
                },
                "Engine": {
                    "Ref": "DatabaseEngine"
                },
                "EngineVersion": {
                    "Ref": "DatabaseEngineVersion"
                },
                "MasterUserPassword": {
                    "Ref": "DatabasePassword"
                },
                "MasterUsername": {
                    "Ref": "DatabaseUser"
                },
                "MultiAZ": {
                    "Ref": "DatabaseMultiAZ"
                },
                "StorageEncrypted": {
                    "Ref": "DatabaseStorageEncrypted"
                },
                "StorageType": "gp2",
                "VPCSecurityGroups": [
                    {
                        "Ref": "DatabaseSecurityGroup"
                    }
                ]
            },
            "Type": "AWS::RDS::DBInstance"
        },
        "PrivateAssetsBucket": {
            "DeletionPolicy": "Retain",
            "Properties": {
                "AccessControl": "Private",
                "CorsConfiguration": {
                    "CorsRules": [
                        {
                            "AllowedHeaders": [
                                "*"
                            ],
                            "AllowedMethods": [
                                "POST",
                                "PUT",
                                "HEAD",
                                "GET"
                            ],
                            "AllowedOrigins": {
                                "Fn::Split": [
                                    ";",
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "https://",
                                                {
                                                    "Ref": "DomainName"
                                                },
                                                {
                                                    "Fn::If": [
                                                        "NoAlternateDomains",
                                                        "",
                                                        ";https://"
                                                    ]
                                                },
                                                {
                                                    "Fn::Join": [
                                                        ";https://",
                                                        {
                                                            "Ref": "DomainNameAlternates"
                                                        }
                                                    ]
                                                }
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                },
                "VersioningConfiguration": {
                    "Status": "Enabled"
                }
            },
            "Type": "AWS::S3::Bucket"
        },
        "PublicRoute": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "PublicRouteTable": {
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PublicSubnet": {
            "Properties": {
                "CidrBlock": "10.0.1.0/24",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PublicSubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "Vpc": {
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsHostnames": "true",
                "EnableDnsSupport": "true"
            },
            "Type": "AWS::EC2::VPC"
        }
    }
}
