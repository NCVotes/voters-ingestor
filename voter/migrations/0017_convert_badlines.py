# Generated by Django 2.0.2 on 2018-04-04 14:06

from django.db import migrations

from voter.models import BadLineTracker


def forward_0017(apps, schema):
    """
    Given the BadLine objects in the DB, create BadLineRange
    objects, collapsing runs of errors into single objects.

    This *loses information* - we don't store the actual bad
    line for every original BadLine object, only the first in
    each run.
    """
    BadLine = apps.get_model('voter.BadLine')
    BadLineRange = apps.get_model('voter.BadLineRange')

    BadLineRange.objects.all().delete()

    tracker = None
    for line in BadLine.objects.order_by('filename', 'is_warning', 'line_no', 'message'):
        if tracker and tracker.filename != line.filename:
            tracker.flush()
            tracker = None
        if not tracker:
            tracker = BadLineTracker(line.filename, BadLineRange)
        tracker.add(
            line.line_no,
            line.line,
            line.message,
            line.is_warning
        )
    if tracker:
        tracker.flush()


def backward_0017(apps, schema):
    "Reverse of forward_00017"
    BadLine = apps.get_model('voter.BadLine')
    BadLineRange = apps.get_model('voter.BadLineRange')

    BadLine.objects.all().delete()

    for blr in BadLineRange.objects.all():
        i = 0
        for line_no in range(start=blr.first_line_no, stop=blr.last_line_no + 1):
            BadLine.objects.create(
                filename=blr.filename,
                message=blr.message,
                line=blr.example_line if i == 0 else '',
                is_warning=blr.is_warning,
                line_no=line_no,
            )
            i += 1


class Migration(migrations.Migration):

    dependencies = [
        ('voter', '0016_badlinerange'),
    ]

    operations = [
        migrations.RunPython(
            forward_0017,
            backward_0017,
        )
    ]
